React 는 jsx 문법으로 작성 외부데이터가 2개 이상 일경우 <div> 태그로 감싸야 한다.

map 함수 동작 과정
1. customers 배열의 각 요소에 대해 map 메소드가 호출됩니다.
2. map 메소드는 각 요소를 customer라는 변수로 전달하여 콜백 함수를 실행합니다.
3. 콜백 함수는 각 customer 데이터를 기반으로 Customer 컴포넌트를 생성하고, 해당 컴포넌트에 props로 데이터를 전달합니다.
4. 모든 Customer 컴포넌트가 생성되어 배열로 반환되고, 이 배열이 div 내에 렌더링됩니다.

* 각 반복요소에 대해 key 속성을 제공하는 것은 필수는 아니다. 하지만 (1. 고유성 보장: 각 요소가 고유하게 식별 2.리렌더링 최적화: React가 DOM을 비교하고 변경사항을 효율적으로 변경)

-------------------------------------------------------------------------------
6강
1.  const { classes } = this.props = const classes = this.props.classes

2. classes 객체는 styles 객체에서 정의된 스타일을 담고 있는 객체 - withStyles HOC(Higher-Order Component)를 사용하면 styles 객체에서 정의된 스타일을 classes 객체로 변환하여 컴포넌트에 props로 전달

-------------------------------------------------------------------------------
7강
웹 서버 프레임 워크 - node.js (express) 는 즉 웹 client 프로그램과 api 역할을 수행하는 것 -> 서버 역할

management/package.json: 서버(node.js)와 클라이언트(React) 를 둘다 실행 해주는 역할

gitignore: 해당 파일이 client 폴더 안에 있을 경우 Client 폴더를 위한 ignore 이다. 즉 해당 파일이 어디에 있냐에 따라 git 을 통해 commit 할 때 node-moudles 를 커밋 안할지 결정된다.


npm install -g nodemon 명령어는 nodemon을 글로벌로 설치합니다. 따라서 프로젝트의 node_modules 폴더에는 nodemon이 없습니다.
nodemon을 로컬로 설치하려면 npm install nodemon --save-dev 명령어를 사용합니다.
nodemon의 글로벌 설치 여부를 확인하려면 nodemon -v 명령어를 사용하여 버전을 확인합니다.

-------------------------------------------------------------------------------
8강
- Restapi: 웹 서버 프레임워크에서 기본적으로 지원하는 기능이다. 웹 서버와 클라이언트 가 웹 프로토콜을 기반으로 하여 효율적으로 데이터를 주고 받을 수 있도록 함.

- /api/customers로 접근시 웹 서버에서 생성된 배열 데이터를 클라이언트에게 json 형식으로 전송

- jsonlint.com와 같은 사이트는 json 형식의 데이터가 올바른 형식인지 체크해주는 사이트이다.

- client 폴더 내 package.json 마지막에 proxy 속성 추가하는 이유: localhost:5000 이 현재개발 서버로 지정되있기 때문에, 해당 서버로 접속하여 데이터를 가져오겠다고 선언하는 것

- props 와 starte 차이: props 는 데이터 값이 변경될 수 없고 state 는 데이터는 값이 변경될 수 있는 경우 명시적으로 구분지어 사용한다. 즉 가져온 데이터 자체의 변경이 아니라 사용자에게 보여주는 내용이 가변적으로 바뀌는 경우에 해당 내용이 가변적으로 바뀔 수 있다는 것을 명시적으로 표현한 거라고 생각하면 된다.

- componentDidMount 함수는 실제로 클라이언트가 서버에서 데이터를 받아올 때 사용된다.

- async(): 비동기적으로 처리하겠다.

-      state = {
    customers: ""
  }

componentDidMount() {
    this.callApi()
      .then(res => this.setState({ customers: res }))
      .catch(err => console.log(err))
  }

  callApi = async () => {
    const Response = await fetch("/api/customers");
    const body = await response.json();
    return body;

  }

componentDidMount 함수는 모든 컴포넌트가 준비가 되었을때 해당 함수를 실행한다. 
* 컴포넌트: 화면에 어떤 내용을 렌더링할지 정의 후 해당 내용을 렌더링하기 위해 필요한 데이터 관리
종류로는 함수, 클래스형이 있으며 주요개념은 Props, state 가 있다.

함수형- function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

클래스형- class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}

callApi 함수의 반환값은 해당 url 접속 시 서버에서 json 형식으로 반환 후 그것을 body 에 담아 리턴한다.
그후 .then 을 통해 body 라는 반환값을 res 로 사용하겠다고 지정 후 setState 를 통해 customers:에 값을 할당한다.
그리고 만약 그 과정 중 오류 발생하면 로그를 찍는다.



-             {this.state.customers ? this.state.customers.map(c => (
              <Customer
                key={c.id}
                id={c.id}
                image={c.image}
                name={c.name}
                birthday={c.birthday}
                gender={c.gender}
                job={c.job}
              />
            )): ""}

삼항연산자 ( 조건 ? true : false ) 롤 통해 값이 있을 경우에만 보여준다.


- 개발자 모드로 customers 의 요청URL를 확인해보면 http://localhost:3000/api/customers 로 되어 있지만 Proxy 설정으로 인해 사실  http://localhost:5000/api/customers 해당 URL를 통해 데이터를 받아 왔을 것이다.
-------------------------------------------------------------------------------
9강
- 클라이언트 <- 서버 의 데이터 전송이 늦어질 경우 api 로딩 메세지를 웹 사이트 상에 출력 할 수 있다. 이미 머트리얼-ui 에서 구현이 되어 있어 해당 라이브러리를 이용하면 편하게 구현 가능

- 리액트 라이브러리가 처음 component를 실행 할 떄의 순서
1. constructor()
2. componentwillMount()
3. render() //실제 컴포넌트를 화면에 그리는 작업
4. componentDidMount()

그리고 props or state 의 변경이 있을 경우 => shouldcomponentUpdate() 함수 실행 

- import CircularProgress from '@material-ui/core/CircularProgress';: 기본 내보내기(default export)를 가져옵니다.
import { CircularProgress } from '@material-ui/core/CircularProgress';: 이름 있는 내보내기(named export)를 가져옵니다.

- <CircularProgress className={classes.progress} variant="determinate" value={this.state.completed}/>: 

CircularProgress 컴포넌트는 원형 프로그레스 바를 렌더링합니다.
className 속성은 컴포넌트에 스타일을 적용합니다.
variant 속성은 프로그레스 바의 유형을 결정합니다 (determinate는 고정된 진행률, indeterminate는 일정하지 않은 진행률).
value 속성은 현재 진행률 값을 설정합니다 (this.state.completed는 0에서 100 사이의 값을 가집니다).



---------------------------------------------------------------------------------
10강
AWS - DB 구축: 일반적으로 AWS 의 RDS를 이욯아면 MYSQL 같은 관계형 데이터베이스를 쉽게 만들 수 있다.

강의 시점과 달리 현재는 AWS 의 RDS(Relation Database Service) 의 프리티어를 사용 후 가장 저렴한 서비스를 신청해도 유료이기 떄문에 mysql 를 설치하였다.

---------------------------------------------------------------------------------
11강
- node.js 와 mysql 연동하는 법에 대해서 배웠다.

- 연동 시 오류가 2가지 발생하였다. 
1.  처음 연동 시 "Client does not support authentication protocol requested by server; consider upgrading MySQL clien" 
오류가 발생했는데 이 문제는 클라이언트 프로그램에서 mysql 패스워드 플러그인 "caching_sha2_password"을 소화하지 못해서 생기는 오류입니다. 클라이언트 프로그램에서 사용할 수 있도록 유저의 패스워드 Plusin을 바꿔주면 된다.

mysql에 접속하시고, 아래와 같이 수정한다.
mysql>  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '비밀번호';

2. 연동 후 이미지가 너무 커서 mysql 쪽에서 update 시도하니 "mysql you are using safe update mode" 오류가 발생하였다. 해당 오류는 edit > preference > safe update... 를 체크해제 한다.

- 그밖에 server.js 로 코드 작성하는 부분이나 다른 부분에선 큰 어려움은 없었다.  
-----------------------------------------------------------------------------------
13강
위 코드에서 Express.js를 사용하여 간단한 웹 서버를 설정하고 있습니다. 이 서버는 고객 정보를 관리하는 RESTful API를 제공합니다. 주요 부분을 설명하겠습니다.

1. 기본 설정
javascript
코드 복사
const fs = require("fs");
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = process.env.PORT || 5000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
모듈 임포트: fs, express, bodyParser 모듈을 불러옵니다.
포트 설정: 서버가 실행될 포트를 설정합니다. 기본값은 5000번입니다.
bodyParser 미들웨어 사용: JSON과 URL-encoded 데이터를 파싱하기 위해 사용합니다.
2. MySQL 연결 설정
javascript
코드 복사
const data = fs.readFileSync("./database.json");
const conf = JSON.parse(data);
const mysql = require("mysql");

const connection = mysql.createConnection({
    host: conf.host,
    user: conf.user,
    password: conf.password,
    port: conf.port,
    database: conf.database
});
connection.connect();
데이터베이스 설정 파일 읽기: database.json 파일을 읽고 파싱하여 데이터베이스 연결 설정을 가져옵니다.
MySQL 연결: MySQL 데이터베이스에 연결을 설정합니다.
3. 파일 업로드 설정
javascript
코드 복사
const multer = require("multer");
const upload = multer({ dest: "./upload" });
multer 설정: 파일 업로드를 처리하기 위해 multer 모듈을 설정합니다. 업로드된 파일은 ./upload 디렉토리에 저장됩니다.
4. 고객 정보 조회 API
javascript
코드 복사
app.get('/api/customers', (req, res) => {
    connection.query(
        "SELECT * FROM management.customer",
        (err, rows, fields) => {
            res.send(rows);
        }
    );
});
GET /api/customers: 고객 정보를 조회하는 API입니다. 데이터베이스에서 고객 정보를 조회하여 클라이언트에게 반환합니다.
5. 이미지 파일 서빙
javascript
코드 복사
app.use("/image", express.static("./upload"));
정적 파일 제공: 업로드된 이미지 파일을 클라이언트에게 제공하기 위해 정적 파일 미들웨어를 설정합니다.
6. 고객 정보 추가 API
javascript
코드 복사
app.post('/api/customers', upload.single("image"), (req, res) => {
    console.log("/api/customers 서버 실행");
    console.log(req.body);
    let sql = "INSERT INTO management.customer VALUES (null, ?, ?, ?, ?, ?)";
    let image = "/image/" + req.file.filename;
    let name = req.body.name;
    let birthday = req.body.birthday;
    let gender = req.body.gender;
    let job = req.body.job;
    let params = [image, name, birthday, gender, job];
    connection.query(sql, params,
        (err, rows, fields) => {
            console.log(err);
            console.log(rows);
            res.send(rows);
        }
    );
});
POST /api/customers: 고객 정보를 추가하는 API입니다.
파일 업로드 처리: upload.single("image") 미들웨어를 사용하여 단일 이미지 파일을 서버에 업로드 합니다.
SQL 삽입 쿼리: 고객 정보를 데이터베이스에 삽입합니다. 삽입된 고객 정보는 이미지 경로, 이름, 생일, 성별, 직업을 포함합니다.
응답 반환: 삽입된 결과를 클라이언트에게 반환합니다.
7. 서버 시작
javascript
코드 복사
app.listen(port, () => console.log(`Listening on port ${port}`));
서버 시작: 설정된 포트에서 서버를 시작하고 콘솔에 로그를 출력합니다.
이 코드의 핵심 기능은 클라이언트가 고객 정보를 조회하고, 새로운 고객 정보를 업로드하며, 업로드된 이미지를 제공하는 것입니다. 이를 위해 Express.js, MySQL, multer 등의 모듈을 사용합니다.